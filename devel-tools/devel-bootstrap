#!/usr/bin/env perl

# Bootstrap an environment for hacking on YABSM. We are going to use Perl::Build
# to compile Perl version 5.16.3, set up App::plx to use the Perl we build, and
# then use plx to install all our dependencies into a local::lib with cpanm.
#
# Perl::Build      - https://metacpan.org/pod/Perl::Build
# App::plx         - https://metacpan.org/pod/App::plx
# App::cpanminus   - https://metacpan.org/pod/App::cpanminus
# Module::CPANfile - https://metacpan.org/pod/Module::CPANfile  

use strict;
use warnings;
use v5.16.3;

use Cwd qw(abs_path);
use File::Basename qw(basename dirname);
use File::Path qw(make_path);

use autodie;

my $script = basename(__FILE__);
my $yabsm_root = dirname(abs_path(__FILE__ . '/..'));

my $usage = <<'END_USAGE';
Usage: devel-bootstrap [arguments]

Arguments:
  -h or --help      Print help (this message) and exit
  -b <dir>          Install local Perl to <dir>. Taken literally
                    so this directory must be named perl-5.16.3
END_USAGE

main();

                 ####################################
                 #               SUBS               #
                 ####################################

sub main {

    # get options
    my $perl_dir = "$yabsm_root/perl-5.16.3";
    my $help;
    use Getopt::Long qw/:config bundling no_ignore_case no_auto_abbrev/;
    GetOptions('b=s' => \$perl_dir, 'help|h' => \$help) or die "$usage";
    print $usage and exit 0 if $help;

    die "$script: error: directory $perl_dir is not named perl-5.16.3\n"
      unless $perl_dir =~ /perl-5\.16\.3\/?$/;

    # main chdir $yabsm_root;
    my $perl = install_perl($perl_dir);
    my $plx  = init_plx($perl);
    install_deps($plx);

    say 'all good';
}

sub install_perl {

    # Install perl version 5.16.3 to $dir using Perl::Build. Note that $dir
    # is taken literally so it should probably end in 'perl-5.16.3'.

    my $dir = shift or die;

    my $perl = "$dir/bin/perl";
    
    unless (-x $perl) {
        # This command builds perl v5.16.13 using Perl::Build's bootstrapping
        # feature, which means we don't need to install Perl::Build explicitly.
        my $cmd = "curl -L https://raw.githubusercontent.com/tokuhirom/Perl-Build/master/perl-build | perl - 5.16.3 $dir";
        say "$script: executing: $cmd";

        0 == system($cmd) or die "$script: error: could not install perl v5.16.3 via Perl::Build\n";
    }

    unless ('5.016003' eq `$perl -e 'print $]'`) {
        die "$perl is not a perl v5.16.3 interpreter\n";
    }

    return $perl;
}

sub init_plx {
    
    # Initialize plx to point at the perl executable $perl. If plx
    # is already installed on the system then use the system plx,
    # otherwise bootstrap a new plx and install it into
    # $yabsm_root/local/bin
    
    my $perl = shift or die;
    
    my $plx = '';
    $plx = "$yabsm_root/local/bin/plx" if -x "$yabsm_root/local/bin/plx";
    $plx = `sh -c 'command -v plx'` if `sh -c 'command -v plx'`;
    chomp $plx;
    unless ($plx) {
        make_path("$yabsm_root/local/bin");
        $plx = "$yabsm_root/local/bin/plx";
        my $plx_bootstrap_cmd = "wget https://raw.githubusercontent.com/shadowcat-mst/plx/master/bin/plx-packed -O $plx";
        say "$script: executing: $plx_bootstrap_cmd";
        0 == system($plx_bootstrap_cmd)
          or die "$script: error: could not perform bootstrap installation of App::plx";
        chmod 0555, $plx;
    }

    my $plx_init_cmd = "$plx --init $perl";

    say "$script: executing: $plx_init_cmd";
    
    0 == system($plx_init_cmd) or die "$script: error: could not initialize plx\n";

    return $plx;
}

sub install_deps {

    # Install deps from /CPANFILE using $plx and cpanminus.

    my $plx = shift or die;
    
    my $cpanfile = "$yabsm_root/CPANFILE";
    
    my $install_cmd = "PERL_CPANM_HOME=$yabsm_root $plx --cpanm -Llocal -v --cpanfile $cpanfile";

    say "$script: executing: $install_cmd";

    0 == system($install_cmd)
      or die "$script: error: could not install all deps specified in $cpanfile\n";
}
